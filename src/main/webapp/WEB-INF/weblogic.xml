<?xml version="1.0" encoding="UTF-8"?>
<wls:weblogic-web-app xmlns:wls="http://xmlns.oracle.com/weblogic/weblogic-web-app" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee         http://java.sun.com/xml/ns/javaee/ejb-jar_3_0.xsd         http://xmlns.oracle.com/weblogic/weblogic-web-app         http://xmlns.oracle.com/weblogic/weblogic-web-app/1.4/weblogic-web-app.xsd">
    <wls:context-root>tcc</wls:context-root>
    <wls:container-descriptor>
        <wls:prefer-application-packages>
            <wls:package-name>com.fasterxml.jackson.*</wls:package-name>
            <wls:package-name>org.codehaus.jackson.*</wls:package-name>
            <wls:package-name>org.slf4j</wls:package-name>
            <wls:package-name>org.hibernate.validator.*</wls:package-name>
            <wls:package-name>javax.validation.*</wls:package-name>
            <wls:package-name>javax.validation.spi.*</wls:package-name>
            <wls:package-name>org.springframework.*</wls:package-name>
        </wls:prefer-application-packages>
    </wls:container-descriptor>
    <wls:session-descriptor>
    	<!-- Indefinite age. This can be configured to something that matches lets say an OIAM token cookie so that if it has 
    	a max age we can force weblogic jsession cookies to expire just before the max age of an OIAM token cookie. -->
    	<!-- Smarish agreed that we can expire the jsession cookie (7h54mins) 6 minutes before the OIAM cookie 
    	will expire (8 hours) -->
    	<wls:cookie-max-age-secs>28440</wls:cookie-max-age-secs> 
    	 <!-- Enable if you want to check in your local that max age handling works in weblogic 
    	-->
    	<!-- 
    	<wls:cookie-max-age-secs>60</wls:cookie-max-age-secs> 
    	 -->
    </wls:session-descriptor>
</wls:weblogic-web-app>